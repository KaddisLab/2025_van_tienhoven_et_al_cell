---
title: "Figure X"
date: "2024-7-22" 
date-modified: last-modified
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE
)
```


```{r }
suppressPackageStartupMessages({
    library(tidyverse)
    library(gt)
    library(targets)
    library(ggplot2)
    library(patchwork)
    library(ggtext)
    library(ggpubr)
    library(ggsignif)
    library(Seurat)
    library(purrr)
    library(tidyseurat)
    require(showtext)
    font_add_google(name = "Roboto", family = "Roboto")
    font_add_google(name = "Roboto Condensed", family = "Roboto Condensed")
    showtext_auto()
})
tar_config_set(store = "/scratch/domeally/DCD.tienhoven_scRNAseq.2024/_targets")
tar_source("/scratch/domeally/DCD.tienhoven_scRNAseq.2024/R")
make_plots_clickable()

# Load data
tar_load(cell_genotypes)
tar_load(seurat_object_lognorm_annotated)
seurat_object <- seurat_object_lognorm_annotated
cell_metadata <- seurat_object[[]] %>%
    as.data.frame() %>%
    rownames_to_column(var = "cell")

cell_metadata <- left_join(cell_genotypes, cell_metadata, by = "cell")
```

## A. Nascent and mature INS counts for NODM Beta cells

```{r}
# Data preparation
plot_data <- cell_metadata %>%
    filter(cell_type == "Beta", diabetes_status == "NODM") %>%
    mutate(
        mature_counts_INS = spliced_counts_INS,
        nascent_INS = unspliced_counts_INS,
        log_mature_INS = log1p(mature_counts_INS),
        log_nascent_INS = log1p(nascent_INS),
        protected_status = ifelse(protected, "Protected", "Susceptible")
    )

# Order the orig.ident factor levels
plot_data$orig.ident <- factor(plot_data$orig.ident,
    levels = plot_data %>%
        arrange(protected_status, orig.ident) %>%
        pull(orig.ident) %>%
        unique()
)
```

```{r}
#| fig-width: 4
#| fig-height: 6
#| out-width: "5%" 

# Prepare data for summary plot
summary_data <- plot_data %>%
    group_by(orig.ident, protected_status) %>%
    summarise(
        mean_log_mature_INS = mean(log_mature_INS, na.rm = TRUE),
        mean_log_nascent_INS = mean(log_nascent_INS, na.rm = TRUE),
        .groups = "drop"
    ) %>%
    pivot_longer(
        cols = c(mean_log_mature_INS, mean_log_nascent_INS),
        names_to = "expression_type",
        values_to = "mean_expression"
    ) %>%
    mutate(
        expression_type = factor(ifelse(expression_type == "mean_log_mature_INS", "Mature", "Nascent"), levels = c("Nascent", "Mature")),
        protected_status = factor(protected_status, levels = c("Protected", "Susceptible"))
    ) %>%
    filter(!is.infinite(mean_expression) & !is.na(mean_expression))

# Create summary plot
summary_plot <- ggplot(summary_data, aes(x = protected_status, y = mean_expression, fill = protected_status)) +
    geom_boxplot(position = position_dodge(width = 0.8), width = 0.7, outlier.shape = NA, alpha = 0.5) +
    geom_point(
        position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.2),
        size = 3, shape = 21, stroke = 0.5,
        aes(fill = protected_status, color = protected_status)
    ) +
    facet_wrap(~expression_type, scales = "fixed") + # Changed to "fixed" for common y-scale
    scale_fill_manual(values = c("Protected" = "blue", "Susceptible" = "red")) +
    scale_color_manual(values = c("Protected" = "blue", "Susceptible" = "red")) +
    theme_minimal() +
    theme(
        legend.position = "none",
        plot.title = element_markdown(hjust = 0.5, size = 16),
        axis.text.y = element_text(size = 12),
        axis.title.y = element_text(size = 14),
        axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        strip.text = element_text(size = 14)
    ) +
    labs(
        title = "INS expression in <span style='color:blue;'>protected</span> and <span style='color:red;'>susceptible</span> donors' Beta cells",
        y = "Mean log-normalized counts"
    )

# Add statistical comparisons and median labels
summary_plot <- summary_plot +
    geom_signif(
        comparisons = list(c("Protected", "Susceptible")),
        map_signif_level = TRUE,
        test = "t.test",
        margin_top = -0.4,
        tip_length = 0,
        extend_line = -0.35,
        color = "black"
    ) +
    stat_summary(
        fun = median,
        geom = "label",
        aes(label = sprintf("%.2f", after_stat(y))),
        color = "white",
        # fill = "black",
        alpha = 0.7,
        # label.size = 0,
        size = 5,
        hjust = -0.5,
        vjust = -0.5
    )
print(summary_plot)
# ggsave("ins_expression_summary.png", summary_plot, width = 3, height = 5, dpi = 300)
```

### Per donor plot
```{r}
# Function to create violin plot
create_violin_plot <- function(data, y_var, title) {
    ggplot(data, aes(x = orig.ident, y = !!sym(y_var), fill = protected_status)) +
        geom_violin(scale = "width", adjust = 1.5, trim = FALSE) +
        geom_boxplot(width = 0.2, outlier.shape = NA, alpha = 0.7) +
        scale_fill_manual(values = c("Protected" = "blue", "Susceptible" = "red")) +
        theme_minimal() +
        theme(
            axis.text.x = element_text(angle = 45, hjust = 1),
            legend.position = "none",
            plot.title = element_markdown(hjust = 0.5) # Enable markdown in title
        ) +
        labs(title = title, x = NULL, y = "Log-normalized counts")
}

# Create plots
mature_plot <- create_violin_plot(plot_data, "log_mature_INS", "Mature INS expression")
nascent_plot <- create_violin_plot(plot_data, "log_nascent_INS", "Nascent INS expression")

# Combine plots with colored title
final_plot <- nascent_plot + mature_plot +plot_layout(ncol = 2) +
    plot_annotation(
        title = "INS expression in <span style='color:blue;'>protected</span> and <span style='color:red;'>susceptible</span> donors' Beta cells",
        theme = theme(
            plot.title = element_markdown(hjust = 0.5, size = 16)
        )
    )

# Display the plot
print(final_plot)
```

## B. Beta cell allele-specific INS expression

```{r}
# Function to create summary statistics
create_summary_stats <- function(data, min_depth = 10) {
    loci <- c("rs3842752", "rs3842753", "rs689")

    # Normalize read depth per donor
    data <- data %>%
        group_by(orig.ident) %>%
        mutate(across(ends_with("_DP"), ~ . / mean(.[. > 0], na.rm = TRUE), .names = "{.col}_norm")) %>%
        ungroup()

    summary_stats <- map_dfr(loci, function(locus) {
        ad_col <- paste0(locus, "_AD")
        dp_col <- paste0(locus, "_DP")
        dp_norm_col <- paste0(locus, "_DP_norm")

        locus_data <- data %>%
            select(orig.ident, all_of(c(ad_col, dp_col, dp_norm_col))) %>%
            mutate(
                af = if_else(.data[[dp_col]] > 0, .data[[ad_col]] / .data[[dp_col]], NA_real_),
                genotype = case_when(
                    is.na(.data[[dp_col]]) | .data[[dp_col]] == 0 ~ NA_character_,
                    af == 0 ~ "HomRef",
                    af > 0 & af < 1 ~ "Het",
                    af == 1 ~ "HomAlt"
                )
            )

        non_zero_depth <- locus_data[[dp_col]] > 0
        non_zero_norm_depth <- locus_data[[dp_norm_col]] > 0

        donor_stats <- locus_data %>%
            group_by(orig.ident) %>%
            summarise(
                mean_depth = mean(.data[[dp_col]][.data[[dp_col]] > 0], na.rm = TRUE),
                mean_af = mean(af, na.rm = TRUE),
                cells_with_min_depth = sum(.data[[dp_col]] >= min_depth, na.rm = TRUE),
                .groups = "drop"
            )

        tibble(
            Locus = locus,
            TotalCells = nrow(data),
            TotalDonors = n_distinct(data$orig.ident),
            DonorsRepresented = sum(donor_stats$cells_with_min_depth > 0),
            PercentDonors = DonorsRepresented / TotalDonors,
            CellsWithMinDepth = sum(locus_data[[dp_col]] >= min_depth, na.rm = TRUE),
            PercentageWithMinDepth = CellsWithMinDepth / TotalCells,
            MeanDepth = mean(locus_data[[dp_col]][non_zero_depth], na.rm = TRUE),
            MedianDepth = median(locus_data[[dp_col]][non_zero_depth], na.rm = TRUE),
            MeanAF = mean(locus_data$af, na.rm = TRUE),
            MedianAF = median(locus_data$af, na.rm = TRUE),
            HetRate = mean(locus_data$genotype == "Het", na.rm = TRUE),
            MeanDepthNorm = mean(locus_data[[dp_norm_col]][non_zero_norm_depth], na.rm = TRUE),
            MedianDepthNorm = median(locus_data[[dp_norm_col]][non_zero_norm_depth], na.rm = TRUE),
            NonZeroCells = sum(non_zero_depth),
            PercentNonZero = sum(non_zero_depth) / TotalCells
        )
    })

    return(summary_stats)
}

# Function to create a scatter plot for a single locus
create_locus_plot <- function(data, locus, min_depth = 10) {
    filtered_data <- data %>%
        filter(!!sym(paste0(locus, "_DP")) > min_depth) %>%
        mutate(
            y = !!sym(paste0(locus, "_AD")),
            x = !!sym(paste0(locus, "_DP")) - y
        )

    # Calculate R-squared and slope
    model <- lm(y ~ x, data = filtered_data)
    r_squared <- summary(model)$r.squared
    slope <- coef(model)[2]

    ggplot(filtered_data, aes(x = x, y = y)) +
        geom_point(alpha = 0.5, color = "blue") +
        geom_smooth(method = "lm", color = "red", se = FALSE) +
        labs(
            title = locus,
            x = "Reference Allele Depth",
            y = "Alternate Allele Depth"
        ) +
        theme_minimal() +
        coord_fixed(ratio = 1, xlim = c(0, NA), ylim = c(0, NA)) +
        geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +
        theme(
            aspect.ratio = 1,
            plot.title = element_text(size = 30, face = "bold")
        ) +
        # Add smaller, darker red R-squared and slope label
        annotate("text",
            x = Inf, y = -Inf,
            label = sprintf("RÂ² = %.3f\nSlope = %.3f", r_squared, slope),
            hjust = 1, vjust = -0.5, size = 20, color = "brown1"
        )
}
```

```{r}
#| fig-width: 15
cell_genotypes <- cell_metadata %>%
    dplyr::filter(cell_type == "Beta" & diabetes_status == "NODM")

# Create plots for each locus
plot_rs3842752 <- create_locus_plot(cell_genotypes, "rs3842752")
plot_rs3842753 <- create_locus_plot(cell_genotypes, "rs3842753")
plot_rs689 <- create_locus_plot(cell_genotypes, "rs689")

# Combine plots
combined_plot <- plot_rs3842752 + plot_rs3842753 + plot_rs689 +
    plot_layout(nrow = 1, heights = 1, widths = 1) +
    plot_annotation(
        title = "INS allele specific expression",
        subtitle = "Filtered for cells with depth > 10 reads",
        theme = theme(
            plot.title = element_text(size = 40, face = "bold"),
            plot.subtitle = element_text(size = 30),
        )
    )

print(combined_plot)
# ggsave("assets/genotype_scatter_plots.png", combined_plot, width = 5)
```

```{r}
# Create summary statistics and format table
create_summary_stats(cell_genotypes) %>%
    gt() %>%
    tab_header(
        title = "Summary Statistics for biallelic INS cells",
        subtitle = "Minimum Depth: 10 reads"
    ) %>%
    fmt_number(
        columns = c(TotalCells, CellsWithMinDepth, NonZeroCells),
        decimals = 0,
        use_seps = TRUE
    ) %>%
    fmt_percent(
        columns = c(PercentageWithMinDepth, PercentDonors, HetRate, PercentNonZero),
        decimals = 1
    ) %>%
    fmt_number(
        columns = c(MeanDepth, MedianDepth, MeanAF, MedianAF, MeanDepthNorm, MedianDepthNorm),
        decimals = 2
    ) %>%
    cols_label(
        TotalCells = "Total Cells",
        TotalDonors = "Total Donors",
        DonorsRepresented = "Donors Represented",
        PercentDonors = "% Donors",
        CellsWithMinDepth = "Cells > Min Depth",
        PercentageWithMinDepth = "% > Min Depth",
        MeanDepth = "Mean Depth",
        MedianDepth = "Median Depth",
        MeanAF = "Mean AF",
        MedianAF = "Median AF",
        HetRate = "Het Rate",
        MeanDepthNorm = "Mean Depth (Norm)",
        MedianDepthNorm = "Median Depth (Norm)",
        NonZeroCells = "Non-Zero Cells",
        PercentNonZero = "% Non-Zero"
    )
```

::: {.callout-important}

We cannot compute allele-specific expression for nascent and mature transcripts separately from this analysis. 

:::
