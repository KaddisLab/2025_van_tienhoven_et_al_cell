
---
title: "HPAP donor metadata"
date: "2024-3-19" 
date-modified: last-modified
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE
)
```

```{r }
#| code-fold: true
#| code-summary: "Show the code"
library(tidyverse)
library(targets)
library(ggridges)
tar_config_set(store = "~/workspaces/DCD.tienhoven_scRNAseq.2024/_targets")
tar_source("/home/domeally/workspaces/DCD.tienhoven_scRNAseq.2024/R")

tar_load(protected_cohort)
tar_load(pancdb_metadata)
pancdb_metadata$protected<-pancdb_metadata$donor_id %in% protected_cohort$sample_id
pancdb_metadata <- pancdb_metadata |> dplyr::filter(str_detect(reagent_kit, "10X"))
pancdb_metadata$diabetes_status <- factor(pancdb_metadata$diabetes_status, levels = names(diabetes_palette))
```

## Disease status by cohort
```{r }
pancdb_metadata %>%
      ggplot(aes(x = diabetes_status, fill = diabetes_status, alpha = protected)) +
      geom_bar(position = "dodge") +
      geom_text(stat = 'count', aes(label = ..count..),
        position = position_dodge(width = 0.9), vjust = -0.5, show.legend = FALSE) +
      scale_fill_manual(values = diabetes_palette) +
      scale_alpha_manual(values = c(`FALSE` = 0.5, `TRUE` = 1), labels = c("susceptible", "Protected")) +  # Set the alpha transparency for protected status
      labs(x = "Disease Status", y = "Count", title = "Disease Status by Cohort", fill = "Disease Status") + theme_classic() 
```

## Age distribution by cohort
```{r }
#| fig-height: 8
library(ggdist)
ggplot(pancdb_metadata, aes(x = sample_age, fill = diabetes_status, alpha = protected)) +
  geom_dots() +
  scale_fill_manual(values = diabetes_palette) +
  scale_alpha_manual(values = c(`FALSE` = 0.2, `TRUE` = 0.7)) +
  facet_wrap(~diabetes_status, ncol = 1, scales = "free_y") +
  labs(x = "Sample Age", y = "Density", 
       title = "Age Distribution by Diabetes Status and Protection", 
       fill = "Diabetes Status") +
  theme_minimal() + ylab(NULL) + guides(alpha = FALSE) +
  theme(legend.position = "bottom", strip.text = element_text(size = 8)) +
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

```


## Ethnicity by cohort
```{r }
#| fig-height: 8
pancdb_metadata %>%
  ggplot(aes(x = sample_ethnicity, fill = sample_ethnicity, alpha = protected)) +
    facet_wrap(~diabetes_status, ncol = 1) +
    geom_dots(dotsize = 0.2, binwidth = 0.6, overflow = "compress", layout = "hex") +
  scale_fill_brewer(palette = "Set2") +  # Choosing a color palette for ethnicity
  scale_alpha_manual(values = c(`FALSE` = 0.4, `TRUE` = 1)) +  # Set the alpha transparency for protected status
  labs(x = "Ethnicity", y = "Count", title = "Ethnicity by Cohort", fill = "Ethnicity") +
  theme_minimal() + ylab(NULL) + guides(alpha = FALSE) +
  theme(legend.position = "bottom", strip.text = element_text(size = 8)) +
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
```

## Sex by cohort
```{r }
#| fig-height: 8

pancdb_metadata %>%
  ggplot(aes(x = sample_sex, fill = sample_sex, alpha = protected)) +
    facet_wrap(~diabetes_status, ncol = 1) +
    geom_dots(dotsize = 0.2, binwidth = 0.4, overflow = "compress", layout = "hex") +
  scale_fill_brewer(palette = "Set1") +  # Choosing a color palette for sex
  scale_alpha_manual(values = c(`FALSE` = 0.4, `TRUE` = 1)) +  # Set the alpha transparency for protected status
  labs(x = "Sex", y = "Count", title = "Sex by Cohort", fill = "Sex") +
  theme_minimal() + ylab(NULL) + guides(alpha = FALSE) +
  theme(legend.position = "bottom", strip.text = element_text(size = 8)) +
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())
```

## Technology by cohort
```{r }
#| fig-height: 8
pancdb_metadata %>%
  ggplot(aes(x = reagent_kit, fill = reagent_kit, alpha = protected)) +
    facet_wrap(~diabetes_status, ncol = 1) +
    geom_dots(dotsize = 0.2, binwidth = 0.5, overflow = "compress", layout = "hex") +
  scale_fill_brewer(palette = "Set3") +  # Choosing a color palette for sex
  scale_alpha_manual(values = c(`FALSE` = 0.4, `TRUE` = 1)) +  # Set the alpha transparency for protected status
  labs(x = "Chemistry", y = "Count", title = "Chemistry by Cohort", fill = "Chemistry") +
  theme_minimal() + ylab(NULL) + guides(alpha = FALSE) +
  theme(legend.position = "bottom", strip.text = element_text(size = 8)) +
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

```

```{r }
plot_pancdb_metrics <- function(pancdb_metadata, metrics) {
  # Convert metrics to numeric if they are not already
  for(metric in metrics) {
    pancdb_metadata[[metric]] <- as.numeric(as.character(pancdb_metadata[[metric]]))
  }
  
  # Proceed with the plotting
  pancdb_metadata %>%
    dplyr::select(protected, all_of(metrics)) %>%
    tidyr::pivot_longer(cols = -protected, names_to = "metric", values_to = "value") %>%
    dplyr::mutate(metric = factor(metric, levels = metrics)) %>%
    ggplot(aes(x = value, y = metric, fill = protected)) +
    geom_density_ridges(alpha = 0.7, scale = 1, quantile_lines = TRUE, quantiles = 2) +
    scale_fill_manual(values = c("#E69F00", "#56B4E9")) +
    labs(x = "Value", y = "Sequencing Metric", fill = "Protected") +
    theme_classic() +
    theme(legend.position = "bottom")
}
```

## Sequencing Quality Metrics
```{r }
quality_metrics <- c(
  "valid_barcodes",
  "q30bases_in_barcode",
  "q30bases_in_rna_read",
  "q30bases_in_sample_index",
  "q30bases_in_umi",
  "sequencing_saturation"
)
plot_pancdb_metrics(pancdb_metadata, quality_metrics)
```

## Sequencing Output Metrics
```{r }
output_metrics <- c(
  "expected_cells",
  "estimated_number_of_cells",
  "median_genes_per_cell",
  "total_genes_detected",
  "median_umi_counts_per_cell"
)
plot_pancdb_metrics(pancdb_metadata, output_metrics)
```

```{r }
output_metrics <- c(
  "number_of_reads",
  "mean_reads_per_cell"
)
plot_pancdb_metrics(pancdb_metadata, output_metrics)
```

## Sequencing Alignment Metrics
```{r }
alignment_metrics <- c(
  "reads_mapped_to_genome",
  "reads_mapped_confidently_to_genome",
  "reads_mapped_confidently_to_intergenic_regions",
  "reads_mapped_confidently_to_intronic_regions",
  "reads_mapped_confidently_to_exonic_regions",
  "reads_mapped_confidently_to_transcriptome",
  "reads_mapped_antisense_to_gene",
  "fraction_reads_in_cells"
)
plot_pancdb_metrics(pancdb_metadata, alignment_metrics)
```

## Mitochondrial Content Metrics
```{r }
mitochondrial_metrics <- c(
  "mito_mean_pct",
  "mito_median_pct",
  "mito_q25pct",
  "mito_q75pct",
  "mito_sd_pct"
)
plot_pancdb_metrics(pancdb_metadata, mitochondrial_metrics)
```

