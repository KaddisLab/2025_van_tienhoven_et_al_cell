
---
title: "UMAP: Beta cells"
date: "2024-5-8" 
date-modified: last-modified
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE
)
```


```{r }
#| code-fold: true
#| code-summary: "Setup"
suppressPackageStartupMessages({
    library(tidyseurat)
    library(Seurat)
    library(Nebulosa)
    library(targets)
    library(ggplot2)
    library(ggdist)
    library(clusterProfiler)
    library(SCP)
    library(harmony)
    library(downloadthis)
    library(sccomp)
})

tar_config_set(store = "/scratch/domeally/DCD.tienhoven_scRNAseq.2024/_targets")
tar_source("/scratch/domeally/DCD.tienhoven_scRNAseq.2024/R")
cpus <- hprcc::slurm_allocation()$CPUs

tar_load(beta_cells_object)

seurat_object <- beta_cells_object$seurat_object
DefaultAssay(seurat_object) <- "RNA"

total_endocrine_cells_per_donor <- beta_cells_object$total_endocrine_cells_per_donor 
```

::: {.panel-tabset}

## UMAP beta cell subclusters

```{r}
#| fig-cap: "Beta cells UMAP"
#| fig-alt: "UMAP beta cells"
#| fig-height: 10
#| fig-width: 10

# seurat_object <- seurat_object |>
#     dplyr::filter(cell_type %in% c("Beta", "Alpha+Beta")) |>
#     Seurat::SCTransform(vst.flavor = "v2", vars.to.regress = c("percent_mt", "percent_rb"), verbose = FALSE) |>
#     Seurat::RunPCA(verbose = FALSE) |>
#     harmony::RunHarmony(group.by.vars = c("tissue_source", "reagent_kit", "orig.ident"), verbose = FALSE) |>
#     Seurat::FindNeighbors(reduction = "harmony", verbose = FALSE) |>
#     Seurat::FindClusters(resolution = 0.1, method = "igraph", verbose = FALSE) |>
#     Seurat::RunUMAP(reduction = "harmony", dims = 1:30, verbose = FALSE)

DimPlot(seurat_object, group.by = "seurat_clusters", label = TRUE, label.size = 6, label.box = TRUE, repel = TRUE, reduction = "umap", shuffle = TRUE, raster = FALSE) +
    labs(title = "Beta cell subclusters") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Cell type

```{r}
#| fig-height: 10
#| fig-width: 10

DimPlot(seurat_object, group.by = "cell_type", label = FALSE, cols = cell_type_palette, reduction = "umap", shuffle = TRUE, raster = FALSE) +
    labs(title = "Cell type") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Protected status

```{r}
#| fig-height: 10
#| fig-width: 10

DimPlot(seurat_object, group.by = "protected", label = FALSE, cols = c("red", "blue"), reduction = "umap", shuffle = TRUE, raster = FALSE) +
    labs(title = "Protected status") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Cell cycle

```{r}
#| fig-height: 10
#| fig-width: 10

DimPlot(seurat_object, group.by = "cell_cycle", label = FALSE, cols = cell_cycle_palette, reduction = "umap", shuffle = TRUE, raster = FALSE) +
    labs(title = "Cell cycle") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Beta cells by donor

```{r}
#| fig-height: 10
#| fig-width: 10

donor_palette <- generate_palette(seurat_object[[]]$orig.ident |> unique() |> length())

DimPlot(seurat_object, group.by = "orig.ident", cols = donor_palette, label = FALSE, reduction = "umap", shuffle = TRUE, raster = FALSE) +
    labs(title = "Donor") +
    NoLegend() +
    theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Age

```{r}
#| fig-cap: "Age"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "sample_age", reduction = "umap", raster = FALSE) +
    labs(title = "Age") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = rev(RColorBrewer::brewer.pal(n = 11, name = "BrBG")))
```

## Islet stress

```{r}
#| fig-cap: "Islet Stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "islet_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "Islet stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlOrRd"))
```
`r signatures$islet_stress`

## Cellular stress

```{r}
#| fig-cap: "Cellular Stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "cellular_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "Cellular stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlOrRd"))
```
`r signatures$cellular_stress`

## Core UPR stress

```{r}
#| fig-cap: "Core UPR stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "core_upr_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "Core UPR stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlGnBu"))
```
`r signatures$core_upr_stress`

## Chronic ER stress

```{r}
#| fig-cap: "Chronic ER stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "chronic_er_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "Chronic ER stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlGnBu"))
```
`r signatures$chronic_er_stress`

## Active ER stress

```{r}
#| fig-cap: "Active ER stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "active_er_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "Active ER stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlGnBu"))
```
`r signatures$active_er_stress`

## MSigDB UPR stress

```{r}
#| fig-cap: "MSigDB UPR stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "msigdb_upr_stress_UCell", reduction = "umap", raster = FALSE) +
    labs(title = "MSigDB UPR stress") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 9, name = "YlGnBu"))
```
`r signatures$msigdb_upr_stress_UCell`

::::

## Number of cells per subcluster, by donor and protected status

::: {.panel-tabset}

## Number of beta cells

```{r}
# Count unique combinations and rename columns
data <- seurat_object |>
    dplyr::count(seurat_clusters, orig.ident, protected) |>
    dplyr::rename(cluster = seurat_clusters, donor = orig.ident, count = n)

# Ensure donor factor levels are consistent within each protected status
data <- data |>
    dplyr::mutate(donor = factor(donor, levels = unique(data$donor)))

# Plot the data with faceting by 'protected' status
ggplot(data, aes(x = cluster, y = donor, fill = count)) +
    geom_tile() +
    scale_fill_viridis_c() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Number of Beta cells per cluster for each donor", y = "Donor") +
    facet_grid(protected ~ ., scales = "free_y", space = "free_y") +
    theme(strip.text.y = element_text(angle = 0))
```

## Proportion of endocrine cells
```{r}
# Count the number of Beta cells per donor per cluster
beta_cells_per_cluster <- seurat_object |>
    dplyr::count(seurat_clusters, orig.ident, protected) |>
    dplyr::rename(cluster = seurat_clusters, donor = orig.ident, beta_count = n)

# Merge total cell counts with beta cell counts
data <- beta_cells_per_cluster |>
    dplyr::left_join(total_endocrine_cells_per_donor, by = "donor") |>
    dplyr::mutate(proportion = beta_count / total_count)

# Ensure donor factor levels are consistent within each protected status
data <- data |>
    dplyr::mutate(donor = factor(donor, levels = unique(data$donor)))

# Plot the data with faceting by 'protected' status
ggplot(data, aes(x = cluster, y = donor, fill = proportion)) +
    geom_tile() +
    scale_fill_viridis_c() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Beta cells as a proportion of endocrine cells, per Cluster for Each Donor", y = "Donor", fill = "Proportion") +
    facet_grid(protected ~ ., scales = "free_y", space = "free_y") +
    theme(strip.text.y = element_text(angle = 0))
    
```

## sccomp

```{r}
sccomp_result <-
    seurat_object |>
    dplyr::mutate(protected = as.factor(c(protected))) |>
    dplyr::filter(orig.ident != "HPAP-019") |> # enriched for b-cells
    dplyr::filter(!is.na(cell_type)) |>
    dplyr::filter(diabetes_status == "NODM") |>
    sccomp::sccomp_estimate(
        formula_composition = ~protected,
        formula_variability = ~protected,
        .sample = orig.ident,
        .cell_group = seurat_clusters,
        bimodal_mean_variability_association = TRUE,
        variational_inference = FALSE,
        cores = cpus
    ) |>
    sccomp::sccomp_remove_outliers(cores = cpus) |> # Optional
    sccomp::sccomp_test()

plots <- sccomp_result |> plot()
```


```{r}
#| fig-cap: "A plot of estimates of differential composition (c_) on the left and differential variability (v_) on the right. The error bars represent 95% credible intervals. The dashed lines represent the minimal effect that the hypothesis test is based on. An effect is labelled as significant if bigger than the minimal effect according to the 95% credible interval."
plots$credible_intervals_1D
```

```{r}
#| eval: FALSE
#| code-fold: true
#| fig-cap: "Differential composition and variability analysis of cell types in relation to protected status. Each point represents a cell type, with error bars showing 95% credible intervals. The x-axis shows log-fold change in composition, y-axis shows log-fold change in variability. Dashed lines indicate thresholds for biologically meaningful changes. Color coding: Red - significant in both composition and variability; Blue - significant in composition only; Green - significant in variability only; Gray - not significant. The 'Intercept' facet shows the overall mean-variability relationship, while other facets (if present) show relationships for different levels of the 'protected' variable."

plots$credible_intervals_2D
```

```{r}
#| fig-cap: "A plot of cell type proportion, faceted by *protected*. \n The blue boxplots represent the posterior predictive check. If the model is likely to be descriptively adequate to the data, the blue box plot should roughly overlay with the black box plot, which represents the observed data. The colour coding represents the significant associations for composition and/or variability."
plots$boxplot
```


::::

TRUE = Protected (G/G), FALSE = Susceptible (G/A)

## Beta cells by ER genes

```{r }
#| fig-width: 8
#| fig-height: 30
FeaturePlot(seurat_object, features = er_genes_of_interest, split.by = "protected", keep.scale = "feature", reduction = "umap") + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) + labs(title = "Protected status")
```

### Density plots

```{r }
#| fig-cap: "Beta cell subclusters"
#| column: margin
DimPlot(seurat_object, group.by = "seurat_clusters", label = TRUE, label.size = 8) + NoLegend() + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

```{r }
#| fig-width: 10
#| fig-height: 10
seurat_object_protected <- subset(seurat_object, subset = protected == "TRUE")
seurat_object_susceptible <- subset(seurat_object, subset = protected == "FALSE")
pplot <- plot_density(seurat_object_protected, features = er_genes_of_interest) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) & NoLegend()
splot <- plot_density(seurat_object_susceptible, features = er_genes_of_interest) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) & NoLegend()
```

::: {.panel-tabset}

### Protected

```{r}
pplot
```

### Susceptible

```{r}
splot
```

:::

## Marker genes

```{r}
#| fig-width: 7
#| fig-height: 12
markers <- FindAllMarkers(seurat_object, only.pos = TRUE)
seurat_object <- ScaleData(seurat_object, features = rownames(seurat_object), verbose = FALSE)
top10 <- markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup()
DoHeatmap(seurat_object, features = top10$gene) + NoLegend()

top20 <- markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 20) %>%
    ungroup()

top20 |> download_this(
    output_name = "top_20_beta_cell_subcluster_markers",
    output_extension = ".csv",
    button_label = "Download top 20 subcluster markers",
    button_type = "success",
    has_icon = TRUE,
    icon = "fa fa-save"
)

```

## Enrichment analysis
```{r}
#| fig-width: 20
#| fig-height: 20
#| column: page
#| eval: FALSE

beta <- SCP::RunDEtest(srt = seurat_object, group_by = "seurat_clusters", fc.threshold = 1, only.pos = FALSE)

beta <- SCP::RunEnrichment(
    srt = beta, group_by = "seurat_clusters", db = "GO_BP", species = "Homo_sapiens",
    DE_threshold = "avg_log2FC > log2(1.5) & p_val_adj < 0.05"
)
# qs::qsave(beta, glue::glue("{analysis_cache}/data/beta_cell_clusters.qs"))
# beta <- qs::qread(glue::glue("{analysis_cache}/data/beta_cell_clusters.qs"))
SCP::EnrichmentPlot(
    srt = beta, group_by = "seurat_clusters", plot_type = "bar"
)
```
