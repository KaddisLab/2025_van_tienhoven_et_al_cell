
---
title: "Beta cells: UMAP"
date: "2024-5-8" 
date-modified: last-modified
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE
)
```


```{r }
#| code-fold: true
#| code-summary: "Setup"
suppressPackageStartupMessages({
    library(tidyseurat)
    library(Seurat)
    library(Nebulosa)
    library(targets)
    library(ggplot2)
    library(ggdist)
    library(clusterProfiler)
    library(SCP)
    library(harmony)
    library(downloadthis)
})

tar_config_set(store = "/scratch/domeally/DCD.tienhoven_scRNAseq.2024/_targets")
tar_source("/scratch/domeally/DCD.tienhoven_scRNAseq.2024/R")
cpus <- hprcc::slurm_allocation()$CPUs

tar_load(seurat_object_annotated_full)
seurat_object <- load_seurat(seurat_object_annotated_full)
DefaultAssay(seurat_object) <- "RNA"

seurat_object <- seurat_object |>
    dplyr::filter(diabetes_status == "NODM")

total_endocrine_cells_per_donor <- seurat_object |>
    dplyr::filter(cell_type %in% c("Alpha", "Beta", "Beta_like", "Delta", "Gamma", "Epsilon", "Gamma+Epsilon")) |>
    dplyr::count(orig.ident) |>
    dplyr::rename(donor = orig.ident, total_count = n)
```

::: {.panel-tabset}

## UMAP beta cell subclusters

```{r}
#| fig-cap: "Beta cells UMAP"
#| fig-alt: "UMAP beta cells"
#| fig-height: 10
#| fig-width: 10

seurat_object <- seurat_object |>
    dplyr::filter(cell_type %in% c("Beta", "Beta_like")) |>
    Seurat::SCTransform(vst.flavor = "v2", vars.to.regress = c("percent_mt", "percent_rb"), verbose = FALSE) |>
    Seurat::RunPCA(verbose = FALSE) |>
    harmony::RunHarmony(group.by.vars = c("tissue_source", "reagent_kit"), verbose = FALSE) |>
    Seurat::FindNeighbors(reduction = "harmony", verbose = FALSE) |>
    Seurat::FindClusters(resolution = 0.1, method = "igraph", verbose = FALSE) |>
    Seurat::RunUMAP(reduction = "harmony", dims = 1:30, verbose = FALSE)

num_clusters <- length(unique(seurat_object[[]]$seurat_clusters))

DimPlot(seurat_object, group.by = "seurat_clusters", label = TRUE, label.size = 6, label.box = TRUE, repel = TRUE, reduction = "umap", shuffle = TRUE) +
    labs(title = "Beta cell subclusters") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Protected status

```{r}
#| fig-height: 10
#| fig-width: 10

DimPlot(seurat_object, group.by = "protected", label = FALSE, cols = c("red", "blue"), reduction = "umap", shuffle = TRUE) +
    labs(title = "Protected status") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Cell cycle

```{r}
#| fig-height: 10
#| fig-width: 10

DimPlot(seurat_object, group.by = "cell_cycle", label = FALSE, cols = cell_cycle_palette, reduction = "umap", shuffle = TRUE) +
    labs(title = "Cell cycle") +
    theme(legend.position = c(0.8, 0.9), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Beta cells by donor

```{r}
#| fig-height: 10
#| fig-width: 10

donor_palette <- generate_palette(seurat_object[[]]$orig.ident |> unique() |> length())

DimPlot(seurat_object, group.by = "orig.ident", cols = donor_palette, label = FALSE, reduction = "umap", shuffle = TRUE) +
    labs(title = "Donor") +
    NoLegend() +
    theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

## Age

```{r}
#| fig-cap: "Age"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "sample_age", reduction = "umap", raster = FALSE) +
    labs(title = "Age") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = rev(RColorBrewer::brewer.pal(n = 11, name = "BrBG")))
```

## ER Stress score

```{r}
#| fig-cap: "ER Stress"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "er_stress_score", reduction = "umap", raster = FALSE) +
    labs(title = "ER stress score") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 11, name = "YlOrRd"))
```
`r er_stress_genes`

## UPR score

```{r}
#| fig-cap: "UPR Score"
#| fig-height: 10
#| fig-width: 10

FeaturePlot(seurat_object, features = "upr_score", reduction = "umap", raster = FALSE) +
    labs(title = "UPR stress score") +
    theme(
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks = element_blank(),
        legend.position = c(0.8, 0.9) # Adjust these values as needed
    ) +
    scale_colour_gradientn(colours = RColorBrewer::brewer.pal(n = 11, name = "YlGnBu"))
```
`r upr_genes`

::::

## Number of cells per subcluster, by donor and protected status

::: {.panel-tabset}

## Number of beta cells

```{r}
# Count unique combinations and rename columns
data <- seurat_object |>
    dplyr::count(seurat_clusters, orig.ident, protected) |>
    dplyr::rename(cluster = seurat_clusters, donor = orig.ident, count = n)

# Ensure donor factor levels are consistent within each protected status
data <- data |>
    dplyr::mutate(donor = factor(donor, levels = unique(data$donor)))

# Plot the data with faceting by 'protected' status
ggplot(data, aes(x = cluster, y = donor, fill = count)) +
    geom_tile() +
    scale_fill_viridis_c() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Number of Beta cells per cluster for each donor", y = "Donor") +
    facet_grid(protected ~ ., scales = "free_y", space = "free_y") +
    theme(strip.text.y = element_text(angle = 0))
```

## Proportion of endocrine cells
```{r}
# Count the number of Beta cells per donor per cluster
beta_cells_per_cluster <- seurat_object |>
    dplyr::count(seurat_clusters, orig.ident, protected) |>
    dplyr::rename(cluster = seurat_clusters, donor = orig.ident, beta_count = n)

# Merge total cell counts with beta cell counts
data <- beta_cells_per_cluster |>
    dplyr::left_join(total_endocrine_cells_per_donor, by = "donor") |>
    dplyr::mutate(proportion = beta_count / total_count)

# Ensure donor factor levels are consistent within each protected status
data <- data |>
    dplyr::mutate(donor = factor(donor, levels = unique(data$donor)))

# Plot the data with faceting by 'protected' status
ggplot(data, aes(x = cluster, y = donor, fill = proportion)) +
    geom_tile() +
    scale_fill_viridis_c() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    labs(title = "Beta cells as a proportion of endocrine cells, per Cluster for Each Donor", y = "Donor", fill = "Proportion") +
    facet_grid(protected ~ ., scales = "free_y", space = "free_y") +
    theme(strip.text.y = element_text(angle = 0))
    
```

::::

TRUE = Protected (G/G), FALSE = Susceptible (G/A)

## Beta cells by ER genes

```{r }
#| fig-width: 8
#| fig-height: 30
FeaturePlot(seurat_object, features = er_genes_of_interest, split.by = "protected", keep.scale = "feature", reduction = "umap") + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) + labs(title = "Protected status")
```

### Density plots

```{r }
#| fig-cap: "Beta cell subclusters"
#| column: margin
DimPlot(seurat_object, group.by = "seurat_clusters", label = TRUE, label.size = 8) + NoLegend() + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank())
```

```{r }
#| fig-width: 10
#| fig-height: 10
seurat_object_protected <- subset(seurat_object, subset = protected == "TRUE")
seurat_object_susceptible <- subset(seurat_object, subset = protected == "FALSE")
pplot <- plot_density(seurat_object_protected, features = er_genes_of_interest) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) & NoLegend()
splot <- plot_density(seurat_object_susceptible, features = er_genes_of_interest) + theme(axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank()) & NoLegend()
```

::: {.panel-tabset}

### Protected

```{r}
pplot
```

### Susceptible

```{r}
splot
```

:::

## Marker genes

```{r}
#| fig-width: 7
#| fig-height: 12
markers <- FindAllMarkers(seurat_object, only.pos = TRUE)
seurat_object <- ScaleData(seurat_object, features = rownames(seurat_object), verbose = FALSE)
top10 <- markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 10) %>%
    ungroup()
DoHeatmap(seurat_object, features = top10$gene) + NoLegend()

top20 <- markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_head(n = 20) %>%
    ungroup()

top20 |> download_this(
    output_name = "top_20_beta_cell_subcluster_markers",
    output_extension = ".csv",
    button_label = "Download top 20 subcluster markers",
    button_type = "success",
    has_icon = TRUE,
    icon = "fa fa-save"
)

```

## Enrichment analysis
```{r}
#| fig-width: 20
#| fig-height: 20
#| column: page
#| eval: FALSE

beta <- SCP::RunDEtest(srt = seurat_object, group_by = "seurat_clusters", fc.threshold = 1, only.pos = FALSE)

beta <- SCP::RunEnrichment(
    srt = beta, group_by = "seurat_clusters", db = "GO_BP", species = "Homo_sapiens",
    DE_threshold = "avg_log2FC > log2(1.5) & p_val_adj < 0.05"
)
# qs::qsave(beta, glue::glue("{analysis_cache}/data/beta_cell_clusters.qs"))
# beta <- qs::qread(glue::glue("{analysis_cache}/data/beta_cell_clusters.qs"))
SCP::EnrichmentPlot(
    srt = beta, group_by = "seurat_clusters", plot_type = "bar"
)
```
