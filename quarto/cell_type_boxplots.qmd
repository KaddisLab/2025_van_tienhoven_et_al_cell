---
title: "Cell type boxplots"
date: "2024-5-21"
date-modified: last-modified
---

```{r, include = FALSE}
knitr::opts_chunk$set(
    collapse = TRUE,
    warning = FALSE,
    message = FALSE
)
suppressPackageStartupMessages({
    library(tidyseurat)
    library(Seurat)
    library(targets)
    library(ggplot2)
    library(ggdist)
    library(ggsignif)
    library(ggpubr)
    library(furrr)
    library(purrr)
    library(hprcc)
    library(progress)
})

tar_config_set(store = "~/workspaces/DCD.tienhoven_scRNAseq.2024/_targets")
tar_source("~/workspaces/DCD.tienhoven_scRNAseq.2024/R")
cpus <- hprcc::slurm_allocation()$CPUs

tar_load(seurat_object_annotated_full)
seurat_object <- load_seurat(seurat_object_annotated_full)

cell_types <- seurat_object |>
    dplyr::select(cell_type) |>
    dplyr::distinct() |>
    dplyr::pull(cell_type) |>
    sort()

cell_types <- c("Beta", cell_types[cell_types != "Beta"])

# Split seurat_object by cell_type and store in a list
seurat_objects_by_cell_type <- seurat_object |>
    dplyr::group_split(cell_type)

# Ensure the names of the list match the cell types
names(seurat_objects_by_cell_type) <- cell_types

plot_expression <- function(seurat_object_filtered) {
    er_expression <- seurat_object_filtered %>%
        dplyr::mutate(protected = factor(protected)) %>%
        FetchData(vars = c("protected", er_genes_of_interest), layer = "data") |>
        tidyr::pivot_longer(
            cols = -protected,
            names_to = "gene",
            values_to = "expression"
        ) |>
        dplyr::filter(expression > 0)

    p1 <- ggplot(er_expression, aes(x = protected, y = expression, fill = protected, col = protected)) +
        stat_dots(position = "dodgejust") +
        stat_pointinterval(col = "black", alpha = 0.6) +
        facet_wrap(~gene, scales = "free_y") +
        geom_signif(
            test = "wilcox.test",
            comparisons = list(c("TRUE", "FALSE")),
            map_signif_level = TRUE,
            margin_top = -0.4,
            tip_length = 0,
            extend_line = -0.35,
            color = "black"
        ) +
        stat_summary(
            fun = median,
            geom = "label",
            aes(label = sprintf("%.2f", after_stat(y)), alpha = 0.4),
            color = "white",
            hjust = 1.1,
            vjust = 1.1
        ) +
        theme_classic() +
        NoLegend() +
        labs(
            title = paste("Expression of ER Genes, per cell for", unique(seurat_object_filtered$cell_type), "cells"),
            x = "Protected Status",
            y = "Normalized Expression"
        ) +
        scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
        scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red"))

    er_expression_PsB <- seurat_object_filtered %>%
        dplyr::mutate(protected = factor(protected)) %>%
        aggregate_cells("orig.ident", assays = "RNA", layers = "data") |>
        dplyr::filter(.feature %in% er_genes_of_interest) |>
        dplyr::select(gene = ".feature", expression = "RNA", protected)

    p2 <- ggplot(er_expression_PsB, aes(x = protected, y = expression, fill = protected, col = protected)) +
        stat_dots(position = "dodgejust") +
        stat_pointinterval(col = "black") +
        facet_wrap(~gene, scales = "free_y") +
        geom_signif(
            test = "wilcox.test",
            comparisons = list(c("TRUE", "FALSE")),
            map_signif_level = TRUE,
            margin_top = -0.4,
            tip_length = 0,
            extend_line = -0.35,
            color = "black"
        ) +
        stat_summary(
            fun = median,
            geom = "label",
            aes(label = sprintf("%.2f", after_stat(y)), alpha = 0.4),
            color = "white",
            hjust = -0.2,
            vjust = -0.7
        ) +
        theme_classic() +
        NoLegend() +
        labs(
            title = paste("Expression of ER Genes, per donor for", unique(seurat_object_filtered$cell_type), "cells"),
            x = "Protected Status",
            y = "Normalized Expression"
        ) +
        scale_fill_manual(values = c("TRUE" = "blue", "FALSE" = "red")) +
        scale_color_manual(values = c("TRUE" = "blue", "FALSE" = "red"))

    list(cell_plot = p1, donor_plot = p2)
}
hprcc::init_multisession()
with_progress({
    handlers("cli")
    plan(multisession, workers = 4)
    plots_list <- furrr::future_map(seurat_objects_by_cell_type, plot_expression, .progress = TRUE)
})
names(plots_list) <- cell_types
```

```{r results='asis', echo=FALSE}
# Function to render the plots in markdown with tabsets
render_plots <- function(cell_type, plots) {
    cat(sprintf("::: {.panel-tabset} %s\n\n", cell_type))

    cat("## Per cell\n\n")
    print(plots$cell_plot)

    cat("\n## Per donor\n\n")
    print(plots$donor_plot)

    cat("\n:::\n")
}
# Render all plots
with_progress({
    handlers("cli")
purrr::walk2(names(plots_list), plots_list, render_plots)
})
```
